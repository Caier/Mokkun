"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const ytdl_core_discord_1 = __importDefault(require("ytdl-core-discord"));
const yts_1 = __importDefault(require("@caier/yts"));
const v4_1 = __importDefault(require("uuid/v4"));
const sc_1 = __importDefault(require("@caier/sc"));
class MusicEntry {
    constructor(opts) {
        this.id = v4_1.default();
        this.addedOn = Date.now();
        this.addedBy = opts.member;
        this.queue = opts.queue;
        this.type = opts.type;
        this.videoInfo = opts.vid;
    }
    get strTime() {
        var _a, _b;
        return (_b = (_a = this.dispatcher) === null || _a === void 0 ? void 0 : _a.streamTime) !== null && _b !== void 0 ? _b : 0;
    }
    get milisLeft() {
        return this.videoInfo.milis - this.strTime;
    }
    get timeLeft() {
        return new Date(this.milisLeft).toISOString().slice(11, -5).replace(/^0+:?0?/g, '');
    }
}
exports.MusicEntry = MusicEntry;
class MusicQueue {
    constructor() {
        this.queue = [];
        this.history = [];
        this.playing = null;
    }
    addEntry(entry, VoiceC, top) {
        this.VoiceCon = VoiceC;
        if (top)
            this.queue.unshift(entry);
        else
            this.queue.push(entry);
        if (!this.playing)
            this._playNext();
        else
            this._announce('addedToQueue', entry);
    }
    _playNext() {
        if (this.queue.length > 0) {
            if (this.playing)
                this.history.push(this.playing);
            this.playing = this.queue.shift();
            this.play(this.playing);
            this._announce('nextSong');
        }
        else
            this._finish();
    }
    async play(entry) {
        var _a, _b;
        if (this.VoiceCon.status != '0')
            throw Error('VoiceConnection is not ready');
        let str;
        if (entry.type == 'yt')
            str = await MokkunMusic.getYTStream(entry.videoInfo.url);
        else if (entry.type == 'sc')
            str = await sc_1.default.download(entry.videoInfo.id);
        str.on('end', () => setTimeout(() => this._playNext(), 2000));
        this.playing.dispatcher = this.VoiceCon.play(str, { type: 'opus', highWaterMark: 1 });
        (_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.setFEC(true);
    }
    _finish() {
        var _a, _b, _c;
        (_c = (_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.pause) === null || _c === void 0 ? void 0 : _c.call(_b);
        if (this.playing)
            this.history.push(this.playing);
        this.playing = null;
        this.destTimer = setTimeout(() => {
            if (!this.playing)
                this.VoiceCon.disconnect();
        }, 600000);
    }
    set destTimer(timer) {
        this.timer && clearTimeout(this.timer);
        this.timer = timer;
    }
    _announce(what, entry, ret) {
        var _a, _b;
        if (!this.outChannel)
            throw Error('Announement channel is not specified');
        let embed = new discord_js_1.MessageEmbed().setColor([112, 0, 55]);
        if (what == 'nextSong') {
            let pl = this.playing;
            embed.setAuthor('NastÄ™pny utwÃ³r ðŸŽµ')
                .setDescription(`**[${pl.videoInfo.name}](${pl.videoInfo.url})**`)
                .setThumbnail(pl.videoInfo.thumbnail)
                .addField("KanaÅ‚", pl.videoInfo.author.name, true)
                .addField("DÅ‚ugoÅ›Ä‡", pl.videoInfo.duration, true)
                .addField("Dodano przez", pl.addedBy.user.username, true)
                .addField("NastÄ™pnie", (_b = (_a = this.queue[0]) === null || _a === void 0 ? void 0 : _a.videoInfo.name) !== null && _b !== void 0 ? _b : 'brak');
        }
        else if (what == 'addedToQueue') {
            let entry = arguments[1];
            embed.setAuthor('Dodano do kolejki')
                .setDescription(`**[${entry.videoInfo.name}](${entry.videoInfo.url})**`)
                .setThumbnail(entry.videoInfo.thumbnail)
                .addField("KanaÅ‚", entry.videoInfo.author.name, true)
                .addField("DÅ‚ugoÅ›Ä‡", entry.videoInfo.duration, true)
                .addField("Za", this.timeLeft, true)
                .addField("Pozycja", this.queue.findIndex(v => v.id == entry.id) + 1);
        }
        else if (what == 'removed') {
            let entry = arguments[1];
            embed.setAuthor('UsuniÄ™to z kolejki')
                .setDescription(`**[${entry.videoInfo.name}](${entry.videoInfo.url})**`)
                .setThumbnail(entry.videoInfo.thumbnail);
        }
        if (ret)
            return embed;
        this.outChannel.send(embed);
    }
    get milisLeft() {
        var _a, _b;
        let len = (((_a = this.playing) === null || _a === void 0 ? void 0 : _a.videoInfo.milis) || 0) - (((_b = this.playing) === null || _b === void 0 ? void 0 : _b.strTime) || 0);
        for (let ent of this.queue.slice(0, -1))
            len += ent.videoInfo.milis;
        return len;
    }
    get timeLeft() {
        return new Date(this.milisLeft).toISOString().slice(11, -5).replace(/^0+:?0?/g, '');
    }
    pause() {
        var _a, _b;
        (_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.pause();
    }
    resume() {
        var _a, _b;
        (_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.resume();
    }
    remove(pos) {
        if (!(/^[1-9]\d*$/).test(pos) || !this.queue[+pos - 1]) {
            return false;
        }
        this._announce('removed', this.queue.splice(+pos - 1, 1)[0]);
        return true;
    }
    setOutChan(chan) {
        this.outChannel = chan;
        return this;
    }
    get status() {
        var _a, _b, _c;
        return ((_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.paused) ? 'paused' : ((_c = this.playing) === null || _c === void 0 ? void 0 : _c.dispatcher) ? 'playing' : 'idle';
    }
}
exports.MusicQueue = MusicQueue;
class MokkunMusic {
    constructor() {
        this.queues = new discord_js_1.Collection();
        sc_1.default.setClientId(process.env.SC_CLIENT_ID);
    }
    getQueue(guild) {
        let q = this.queues.get(guild.id);
        if (!q) {
            q = new MusicQueue();
            this.queues.set(guild.id, q);
        }
        return q;
    }
    searchVideos(query) {
        return yts_1.default(query);
    }
    searchSC(query) {
        return sc_1.default.search(query);
    }
    static getYTStream(url) {
        return ytdl_core_discord_1.default(url, { quality: 'highestaudio', highWaterMark: 1 << 25 });
    }
    destroyQueue(guildid) {
        this.queues.delete(guildid);
    }
}
exports.MokkunMusic = MokkunMusic;
//# sourceMappingURL=data:application/json;base64,