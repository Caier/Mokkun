"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const ytdl_core_discord_1 = __importDefault(require("ytdl-core-discord"));
const yts_1 = __importDefault(require("@caier/yts"));
const v4_1 = __importDefault(require("uuid/v4"));
class MusicEntry {
    constructor(opts) {
        this.id = v4_1.default();
        this.addedOn = Date.now();
        this.addedBy = opts.member;
        this.queue = opts.queue;
        this.type = opts.type;
        this.videoInfo = opts.vid;
    }
    get strTime() {
        var _a, _b;
        return (_b = (_a = this.dispatcher) === null || _a === void 0 ? void 0 : _a.streamTime) !== null && _b !== void 0 ? _b : 0;
    }
    get milisLeft() {
        return this.videoInfo.milis - this.strTime;
    }
    get timeLeft() {
        return new Date(this.milisLeft).toISOString().slice(11, -5).replace(/^0+:?0?/g, '');
    }
}
exports.MusicEntry = MusicEntry;
class MusicQueue {
    constructor() {
        this.queue = [];
        this.history = [];
        this.playing = null;
    }
    addEntry(entry, VoiceC) {
        this.VoiceCon = VoiceC;
        this.queue.push(entry);
        if (!this.playing)
            this._playNext();
        else
            this._announce('addedToQueue', this.queue[this.queue.length - 1]);
    }
    _playNext() {
        if (this.queue.length > 0) {
            if (this.playing)
                this.history.push(this.playing);
            this.playing = this.queue.shift();
            this.play(this.playing);
            this._announce('nextSong');
        }
        else
            this._finish();
    }
    async play(entry) {
        var _a, _b;
        if (this.VoiceCon.status != '0')
            throw Error('VoiceConnection is not ready');
        let str;
        if (entry.type == 'yt') {
            str = await MokkunMusic.getYTStream(entry.videoInfo.url);
            str.on('end', () => setTimeout(() => this._playNext(), 2000) && console.log('stream closed'));
        }
        this.playing.dispatcher = this.VoiceCon.play(str, { type: 'opus', highWaterMark: 1 });
        (_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.setFEC(true);
    }
    _finish() {
        var _a, _b, _c;
        (_c = (_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.pause) === null || _c === void 0 ? void 0 : _c.call(_b);
        if (this.playing)
            this.history.push(this.playing);
        this.playing = null;
        this.destTimer = setTimeout(() => {
            if (!this.playing)
                this.VoiceCon.disconnect();
        }, 600000);
    }
    set destTimer(timer) {
        this.timer && clearTimeout(this.timer);
        this.timer = timer;
    }
    _announce(what, entry, ret) {
        var _a, _b;
        if (!this.outChannel)
            throw Error('Announement channel is not specified');
        let embed = new discord_js_1.MessageEmbed().setColor([112, 0, 55]);
        if (what == 'nextSong') {
            let pl = this.playing;
            embed.setAuthor('NastÄ™pny utwÃ³r ðŸŽµ')
                .setDescription(`**[${pl.videoInfo.name}](${pl.videoInfo.url})**`)
                .setThumbnail(pl.videoInfo.thumbnail)
                .addField("KanaÅ‚", pl.videoInfo.author.name, true)
                .addField("DÅ‚ugoÅ›Ä‡", pl.videoInfo.duration, true)
                .addField("Dodano przez", pl.addedBy.user.username, true)
                .addField("NastÄ™pnie", (_b = (_a = this.queue[0]) === null || _a === void 0 ? void 0 : _a.videoInfo.name) !== null && _b !== void 0 ? _b : 'brak');
        }
        else if (what == 'addedToQueue') {
            let entry = arguments[1];
            embed.setAuthor('Dodano do kolejki')
                .setDescription(`**[${entry.videoInfo.name}](${entry.videoInfo.url})**`)
                .setThumbnail(entry.videoInfo.thumbnail)
                .addField("KanaÅ‚", entry.videoInfo.author.name, true)
                .addField("DÅ‚ugoÅ›Ä‡", entry.videoInfo.duration, true)
                .addField("Za", this.timeLeft, true)
                .addField("Pozycja", this.queue.length);
        }
        else if (what == 'removed') {
            let entry = arguments[1];
            embed.setAuthor('UsuniÄ™to z kolejki')
                .setDescription(`**[${entry.videoInfo.name}](${entry.videoInfo.url})**`)
                .setThumbnail(entry.videoInfo.thumbnail);
        }
        if (ret)
            return embed;
        this.outChannel.send(embed);
    }
    get milisLeft() {
        var _a, _b;
        let len = (((_a = this.playing) === null || _a === void 0 ? void 0 : _a.videoInfo.milis) || 0) - (((_b = this.playing) === null || _b === void 0 ? void 0 : _b.strTime) || 0);
        for (let ent of this.queue.slice(0, -1))
            len += ent.videoInfo.milis;
        return len;
    }
    get timeLeft() {
        return new Date(this.milisLeft).toISOString().slice(11, -5).replace(/^0+:?0?/g, '');
    }
    pause() {
        var _a, _b;
        (_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.pause();
    }
    resume() {
        var _a, _b;
        (_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.resume();
    }
    remove(pos) {
        if (!(/^[1-9]\d*$/).test(pos) || !this.queue[+pos - 1]) {
            return false;
        }
        this._announce('removed', this.queue.splice(+pos - 1, 1)[0]);
        return true;
    }
    setOutChan(chan) {
        this.outChannel = chan;
        return this;
    }
    get status() {
        var _a, _b, _c;
        return ((_b = (_a = this.playing) === null || _a === void 0 ? void 0 : _a.dispatcher) === null || _b === void 0 ? void 0 : _b.paused) ? 'paused' : ((_c = this.playing) === null || _c === void 0 ? void 0 : _c.dispatcher) ? 'playing' : 'idle';
    }
}
exports.MusicQueue = MusicQueue;
class MokkunMusic {
    constructor() {
        this.queues = new discord_js_1.Collection();
    }
    getQueue(guild) {
        let q = this.queues.get(guild.id);
        if (!q) {
            q = new MusicQueue();
            this.queues.set(guild.id, q);
        }
        return q;
    }
    searchVideos(query) {
        return yts_1.default(query);
    }
    static getYTStream(url) {
        return ytdl_core_discord_1.default(url, { quality: 'highestaudio', highWaterMark: 1 << 25 });
    }
    destroyQueue(guildid) {
        this.queues.delete(guildid);
    }
}
exports.MokkunMusic = MokkunMusic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9ra3VuTXVzaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvTW9ra3VuTXVzaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBeUc7QUFHekcsMEVBQXFDO0FBQ3JDLHFEQUE2QjtBQUU3QixpREFBMkI7QUFFM0IsTUFBYSxVQUFVO0lBU25CLFlBQVksSUFBZ0Y7UUFSNUYsT0FBRSxHQUFXLFlBQUksRUFBRSxDQUFDO1FBQ3BCLFlBQU8sR0FBVyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFRekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLE9BQU87O1FBQ1AsbUJBQU8sSUFBSSxDQUFDLFVBQVUsMENBQUUsVUFBVSxtQ0FBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQUksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUMvQyxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQztDQUNKO0FBM0JELGdDQTJCQztBQUVELE1BQWEsVUFBVTtJQUF2QjtRQUVJLFVBQUssR0FBaUIsRUFBRSxDQUFDO1FBQ3pCLFlBQU8sR0FBaUIsRUFBRSxDQUFDO1FBRTNCLFlB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LElBQUksQ0FBQyxPQUFPLDBDQUFFLFVBQVUsMENBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQUEsSUFBSSxDQUFDLE9BQU8sMENBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN2RyxDQUFDO0NBQ0o7QUEvSEQsZ0NBK0hDO0FBRUQsTUFBYSxXQUFXO0lBQXhCO1FBQ1ksV0FBTSxHQUFHLElBQUksdUJBQVUsRUFBc0IsQ0FBQztJQXNCMUQsQ0FBQztJQXBCRyxRQUFRLENBQUMsS0FBWTtRQUNqQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEMsSUFBRyxDQUFDLENBQUMsRUFBRTtZQUNILENBQUMsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDaEM7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBYTtRQUN0QixPQUFPLGFBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFXO1FBQzFCLE9BQU8sMkJBQUksQ0FBQyxHQUFHLEVBQUUsRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxDQUFDLElBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsWUFBWSxDQUFDLE9BQWU7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNKO0FBdkJELGtDQXVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbGxlY3Rpb24sIFRleHRDaGFubmVsLCBNZXNzYWdlRW1iZWQsIEd1aWxkLCBHdWlsZE1lbWJlciwgU3RyZWFtRGlzcGF0Y2hlciB9IGZyb20gJ2Rpc2NvcmQuanMnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCBWb2ljZUNvbm5lY3Rpb24gZnJvbSAnZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL1ZvaWNlQ29ubmVjdGlvbic7XHJcbmltcG9ydCB5dGRsIGZyb20gJ3l0ZGwtY29yZS1kaXNjb3JkJztcclxuaW1wb3J0IHl0cyBmcm9tICdAY2FpZXIveXRzJztcclxuaW1wb3J0IHsgVmlkZW9FbnRyeSB9IGZyb20gJ0BjYWllci95dHMvbGliL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgdXVpZCBmcm9tICd1dWlkL3Y0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBNdXNpY0VudHJ5IHtcclxuICAgIGlkOiBzdHJpbmcgPSB1dWlkKCk7XHJcbiAgICBhZGRlZE9uOiBudW1iZXIgPSBEYXRlLm5vdygpO1xyXG4gICAgYWRkZWRCeTogR3VpbGRNZW1iZXI7XHJcbiAgICBxdWV1ZTogTXVzaWNRdWV1ZTtcclxuICAgIHR5cGU6IFwieXRcInxcInNjXCI7XHJcbiAgICB2aWRlb0luZm86IFZpZGVvRW50cnk7XHJcbiAgICBkaXNwYXRjaGVyPzogU3RyZWFtRGlzcGF0Y2hlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRzOiB7dmlkOiBWaWRlb0VudHJ5LCBtZW1iZXI6IEd1aWxkTWVtYmVyLCBxdWV1ZTogTXVzaWNRdWV1ZSwgdHlwZTogXCJ5dFwifFwic2NcIn0pIHtcclxuICAgICAgICB0aGlzLmFkZGVkQnkgPSBvcHRzLm1lbWJlcjtcclxuICAgICAgICB0aGlzLnF1ZXVlID0gb3B0cy5xdWV1ZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBvcHRzLnR5cGU7XHJcbiAgICAgICAgdGhpcy52aWRlb0luZm8gPSBvcHRzLnZpZDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IHN0clRpbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2hlcj8uc3RyZWFtVGltZSA/PyAwO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtaWxpc0xlZnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9JbmZvLm1pbGlzIC0gdGhpcy5zdHJUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0aW1lTGVmdCgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5taWxpc0xlZnQpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMTEsIC01KS5yZXBsYWNlKC9eMCs6PzA/L2csICcnKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE11c2ljUXVldWUge1xyXG4gICAgcHJpdmF0ZSB0aW1lcj86IE5vZGVKUy5UaW1lb3V0O1xyXG4gICAgcXVldWU6IE11c2ljRW50cnlbXSA9IFtdO1xyXG4gICAgaGlzdG9yeTogTXVzaWNFbnRyeVtdID0gW107XHJcbiAgICBWb2ljZUNvbjogVm9pY2VDb25uZWN0aW9uO1xyXG4gICAgcGxheWluZzogTXVzaWNFbnRyeSB8IG51bGwgPSBudWxsO1xyXG4gICAgb3V0Q2hhbm5lbD86IFRleHRDaGFubmVsO1xyXG5cclxuICAgIGFkZEVudHJ5KGVudHJ5OiBNdXNpY0VudHJ5LCBWb2ljZUM6IFZvaWNlQ29ubmVjdGlvbikge1xyXG4gICAgICAgIHRoaXMuVm9pY2VDb24gPSBWb2ljZUM7XHJcbiAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKGVudHJ5KTtcclxuICAgICAgICBpZighdGhpcy5wbGF5aW5nKVxyXG4gICAgICAgICAgICB0aGlzLl9wbGF5TmV4dCgpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5fYW5ub3VuY2UoJ2FkZGVkVG9RdWV1ZScsIHRoaXMucXVldWVbdGhpcy5xdWV1ZS5sZW5ndGggLSAxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3BsYXlOZXh0KCkge1xyXG4gICAgICAgIGlmKHRoaXMucXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBpZih0aGlzLnBsYXlpbmcpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaCh0aGlzLnBsYXlpbmcpO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlpbmcgPSB0aGlzLnF1ZXVlLnNoaWZ0KCkgYXMgTXVzaWNFbnRyeTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5KHRoaXMucGxheWluZyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2Fubm91bmNlKCduZXh0U29uZycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuX2ZpbmlzaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHBsYXkoZW50cnk6IE11c2ljRW50cnkpIHtcclxuICAgICAgICBpZih0aGlzLlZvaWNlQ29uLnN0YXR1cyAhPSAnMCcpIFxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignVm9pY2VDb25uZWN0aW9uIGlzIG5vdCByZWFkeScpO1xyXG4gICAgICAgIGxldCBzdHI7XHJcbiAgICAgICAgaWYoZW50cnkudHlwZSA9PSAneXQnKSB7XHJcbiAgICAgICAgICAgIHN0ciA9IGF3YWl0IE1va2t1bk11c2ljLmdldFlUU3RyZWFtKGVudHJ5LnZpZGVvSW5mby51cmwpO1xyXG4gICAgICAgICAgICBzdHIub24oJ2VuZCcsICgpID0+IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fcGxheU5leHQoKSwgMjAwMCkgJiYgY29uc29sZS5sb2coJ3N0cmVhbSBjbG9zZWQnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICg8TXVzaWNFbnRyeT4gdGhpcy5wbGF5aW5nKS5kaXNwYXRjaGVyID0gdGhpcy5Wb2ljZUNvbi5wbGF5KHN0ciwge3R5cGU6ICdvcHVzJywgaGlnaFdhdGVyTWFyazogMX0pO1xyXG4gICAgICAgIHRoaXMucGxheWluZz8uZGlzcGF0Y2hlcj8uc2V0RkVDKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIF9maW5pc2goKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5aW5nPy5kaXNwYXRjaGVyPy5wYXVzZT8uKCk7XHJcbiAgICAgICAgaWYodGhpcy5wbGF5aW5nKVxyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaCh0aGlzLnBsYXlpbmcpO1xyXG4gICAgICAgIHRoaXMucGxheWluZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZXN0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYoIXRoaXMucGxheWluZylcclxuICAgICAgICAgICAgICAgIHRoaXMuVm9pY2VDb24uZGlzY29ubmVjdCgpOyBcclxuICAgICAgICB9LCA2MDAwMDApO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkZXN0VGltZXIodGltZXI6IE5vZGVKUy5UaW1lb3V0KSB7XHJcbiAgICAgICAgdGhpcy50aW1lciAmJiBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XHJcbiAgICAgICAgdGhpcy50aW1lciA9IHRpbWVyO1xyXG4gICAgfVxyXG5cclxuICAgIF9hbm5vdW5jZSh3aGF0OiAnbmV4dFNvbmcnfCdhZGRlZFRvUXVldWUnfCdyZW1vdmVkJywgZW50cnk/OiBNdXNpY0VudHJ5LCByZXQ/OiBib29sZWFuKSA6IHZvaWQgfCBNZXNzYWdlRW1iZWQge1xyXG4gICAgICAgIGlmKCF0aGlzLm91dENoYW5uZWwpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBbm5vdW5lbWVudCBjaGFubmVsIGlzIG5vdCBzcGVjaWZpZWQnKTtcclxuICAgICAgICBsZXQgZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKCkuc2V0Q29sb3IoWzExMiwgMCwgNTVdKTtcclxuICAgICAgICBpZih3aGF0ID09ICduZXh0U29uZycpIHtcclxuICAgICAgICAgICAgbGV0IHBsID0gdGhpcy5wbGF5aW5nIGFzIE11c2ljRW50cnk7XHJcbiAgICAgICAgICAgIGVtYmVkLnNldEF1dGhvcignTmFzdMSZcG55IHV0d8OzciDwn461JylcclxuICAgICAgICAgICAgLnNldERlc2NyaXB0aW9uKGAqKlske3BsLnZpZGVvSW5mby5uYW1lfV0oJHtwbC52aWRlb0luZm8udXJsfSkqKmApXHJcbiAgICAgICAgICAgIC5zZXRUaHVtYm5haWwocGwudmlkZW9JbmZvLnRodW1ibmFpbClcclxuICAgICAgICAgICAgLmFkZEZpZWxkKFwiS2FuYcWCXCIsIHBsLnZpZGVvSW5mby5hdXRob3IubmFtZSwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKFwiRMWCdWdvxZvEh1wiLCBwbC52aWRlb0luZm8uZHVyYXRpb24sIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChcIkRvZGFubyBwcnplelwiLCBwbC5hZGRlZEJ5LnVzZXIudXNlcm5hbWUsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChcIk5hc3TEmXBuaWVcIiwgdGhpcy5xdWV1ZVswXT8udmlkZW9JbmZvLm5hbWUgPz8gJ2JyYWsnKTtcclxuICAgICAgICB9IFxyXG4gICAgICAgIGVsc2UgaWYod2hhdCA9PSAnYWRkZWRUb1F1ZXVlJykge1xyXG4gICAgICAgICAgICBsZXQgZW50cnkgOiBNdXNpY0VudHJ5ID0gYXJndW1lbnRzWzFdO1xyXG4gICAgICAgICAgICBlbWJlZC5zZXRBdXRob3IoJ0RvZGFubyBkbyBrb2xlamtpJylcclxuICAgICAgICAgICAgLnNldERlc2NyaXB0aW9uKGAqKlske2VudHJ5LnZpZGVvSW5mby5uYW1lfV0oJHtlbnRyeS52aWRlb0luZm8udXJsfSkqKmApXHJcbiAgICAgICAgICAgIC5zZXRUaHVtYm5haWwoZW50cnkudmlkZW9JbmZvLnRodW1ibmFpbClcclxuICAgICAgICAgICAgLmFkZEZpZWxkKFwiS2FuYcWCXCIsIGVudHJ5LnZpZGVvSW5mby5hdXRob3IubmFtZSwgdHJ1ZSlcclxuICAgICAgICAgICAgLmFkZEZpZWxkKFwiRMWCdWdvxZvEh1wiLCBlbnRyeS52aWRlb0luZm8uZHVyYXRpb24sIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChcIlphXCIsIHRoaXMudGltZUxlZnQsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChcIlBvenljamFcIiwgdGhpcy5xdWV1ZS5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHdoYXQgPT0gJ3JlbW92ZWQnKSB7XHJcbiAgICAgICAgICAgIGxldCBlbnRyeSA6IE11c2ljRW50cnkgPSBhcmd1bWVudHNbMV07XHJcbiAgICAgICAgICAgIGVtYmVkLnNldEF1dGhvcignVXN1bmnEmXRvIHoga29sZWpraScpXHJcbiAgICAgICAgICAgIC5zZXREZXNjcmlwdGlvbihgKipbJHtlbnRyeS52aWRlb0luZm8ubmFtZX1dKCR7ZW50cnkudmlkZW9JbmZvLnVybH0pKipgKVxyXG4gICAgICAgICAgICAuc2V0VGh1bWJuYWlsKGVudHJ5LnZpZGVvSW5mby50aHVtYm5haWwpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHJldClcclxuICAgICAgICAgICAgcmV0dXJuIGVtYmVkO1xyXG4gICAgICAgIHRoaXMub3V0Q2hhbm5lbC5zZW5kKGVtYmVkKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWlsaXNMZWZ0KCkge1xyXG4gICAgICAgIGxldCBsZW4gPSAodGhpcy5wbGF5aW5nPy52aWRlb0luZm8ubWlsaXMgfHwgMCkgLSAodGhpcy5wbGF5aW5nPy5zdHJUaW1lIHx8IDApO1xyXG4gICAgICAgIGZvcihsZXQgZW50IG9mIHRoaXMucXVldWUuc2xpY2UoMCwgLTEpKVxyXG4gICAgICAgICAgICBsZW4gKz0gZW50LnZpZGVvSW5mby5taWxpcztcclxuICAgICAgICByZXR1cm4gbGVuO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0aW1lTGVmdCgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5taWxpc0xlZnQpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMTEsIC01KS5yZXBsYWNlKC9eMCs6PzA/L2csICcnKTtcclxuICAgIH1cclxuXHJcbiAgICBwYXVzZSgpIHtcclxuICAgICAgICB0aGlzLnBsYXlpbmc/LmRpc3BhdGNoZXI/LnBhdXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdW1lKCkge1xyXG4gICAgICAgIHRoaXMucGxheWluZz8uZGlzcGF0Y2hlcj8ucmVzdW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKHBvczogc3RyaW5nKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmKCEoL15bMS05XVxcZCokLykudGVzdChwb3MpIHx8ICF0aGlzLnF1ZXVlWytwb3MtMV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9hbm5vdW5jZSgncmVtb3ZlZCcsIHRoaXMucXVldWUuc3BsaWNlKCtwb3MtMSwgMSlbMF0pO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE91dENoYW4oY2hhbjogVGV4dENoYW5uZWwpIDogTXVzaWNRdWV1ZSB7XHJcbiAgICAgICAgdGhpcy5vdXRDaGFubmVsID0gY2hhbjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3RhdHVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBsYXlpbmc/LmRpc3BhdGNoZXI/LnBhdXNlZCA/ICdwYXVzZWQnIDogdGhpcy5wbGF5aW5nPy5kaXNwYXRjaGVyID8gJ3BsYXlpbmcnIDogJ2lkbGUnO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTW9ra3VuTXVzaWMge1xyXG4gICAgcHJpdmF0ZSBxdWV1ZXMgPSBuZXcgQ29sbGVjdGlvbjxzdHJpbmcsIE11c2ljUXVldWU+KCk7XHJcblxyXG4gICAgZ2V0UXVldWUoZ3VpbGQ6IEd1aWxkKSA6IE11c2ljUXVldWUge1xyXG4gICAgICAgIGxldCBxID0gdGhpcy5xdWV1ZXMuZ2V0KGd1aWxkLmlkKTtcclxuICAgICAgICBpZighcSkge1xyXG4gICAgICAgICAgICBxID0gbmV3IE11c2ljUXVldWUoKTtcclxuICAgICAgICAgICAgdGhpcy5xdWV1ZXMuc2V0KGd1aWxkLmlkLCBxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHE7XHJcbiAgICB9XHJcblxyXG4gICAgc2VhcmNoVmlkZW9zKHF1ZXJ5OiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4geXRzKHF1ZXJ5KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0WVRTdHJlYW0odXJsOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4geXRkbCh1cmwsIHtxdWFsaXR5OiAnaGlnaGVzdGF1ZGlvJywgaGlnaFdhdGVyTWFyazogMTw8MjV9KTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95UXVldWUoZ3VpbGRpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZXMuZGVsZXRlKGd1aWxkaWQpO1xyXG4gICAgfSBcclxufSJdfQ==